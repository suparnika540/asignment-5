
1. write a c program to reverse a string using stack?
#include<stdio.h>
#include <stdlib.h>
#include<string.h>
#define SIZE 25
char stack[SIZE];
int top = -1;
void push(char str){
   if(top == SIZE-1)
      printf("\nStack is Full!!! Insertion is not possible!!!");
   else{
      top++;
      stack[top] = str;
   }
}
void display(){
   if(top == -1)
      printf("\nStack is Empty!!!");
   else{
      for(int i=top;i>=0;i--)
      {printf("%c",stack[i]);}
      
   }
}
void main()
{
   char a[20];
   int n;
   printf("enter a string");
   scanf("%s",a);
   printf("lenth of string");
   scanf("%d",&n);
   for (int i=0;i<n;i++)
   {
       push(a[i]);
   }
   display();
}
2. write a program for Infix To Postfix Conversion Using Stack.
#include <stdio.h>
#include <ctype.h>
#define SIZE 50            

char stack[SIZE];
int top=-1;       
 
push(char elem)
{                       
    stack[++top]=elem;
}
 
char pop()
{                      
    return(stack[top--]);
}
 
int pr(char symbol)
{                 
    
	if(symbol == '^')
	{
		return(3);
	}
	else if(symbol == '*' || symbol == '/')
	{
		return(2);
	}
	else if(symbol == '+' || symbol == '-')          
	{
		return(1);
	}
	else
	{
		return(0);
	}
}

void main()
{                        
    char infix[50],postfix[50],ch,elem;
    int i=0,k=0;
    printf("Enter Infix Expression : ");
    scanf("%s",infix);
    push('#');
    while( (ch=infix[i++]) != '\0')
    {
        if( ch == '(') push(ch);
        else
            if(isalnum(ch)) postfix[k++]=ch;
            else
                if( ch == ')')
                {
                    while( stack[top] != '(')
                        postfix[k++]=pop();
                    elem=pop(); 
                }
                else
                {       
                    while( pr(stack[top]) >= pr(ch) )
                        postfix[k++]=pop();
                    push(ch);
                }
    }
    while( stack[top] != '#')     
        postfix[k++]=pop();
    postfix[k]='\0';          
    printf("\nPostfix Expression =  %s\n",postfix);
}
3. write a C Program to Implement Queue Using Two Stacks
#include <stdio.h>
#include <stdlib.h>
struct node
{
    int data;
    struct node *next;
};
void push(struct node** top, int data);
int pop(struct node** top);
struct queue
{
    struct node *stack1;
    struct node *stack2;
};
void enqueue(struct queue *q, int x)
{
    push(&q->stack1, x);
}
void dequeue(struct queue *q)
{
    int x;
    if (q->stack1 == NULL && q->stack2 == NULL) {
        printf("queue is empty");
        return;
    }
    if (q->stack2 == NULL) {
        while (q->stack1 != NULL) {
        x = pop(&q->stack1);
        push(&q->stack2, x);
        }
    }
    x = pop(&q->stack2);
    printf("%d\n", x);
}
void push(struct node** top, int data)
{
    struct node* newnode = (struct node*) malloc(sizeof(struct node));
        if (newnode == NULL) {
            printf("Stack overflow \n");
            return;
        }
    newnode->data = data;
    newnode->next = (*top);
    (*top) = newnode;
}
int pop(struct node** top)
{
    int buff;
    struct node *t;
    if (*top == NULL) {
        printf("Stack underflow \n");
        return 0;
    }
    else {
        t = *top;
        buff = t->data;
        *top = t->next;
        free(t);
        return buff;
    }
}
void display(struct node *top1,struct node *top2)
{
    while (top1 != NULL) {
        printf("%d\n", top1->data);
        top1 = top1->next;
    }
    while (top2 != NULL) {
        printf("%d\n", top2->data);
        top2 = top2->next;
    }
}
int main()
{
    struct queue *q = (struct queue*)malloc(sizeof(struct queue));
    int f = 0, a;
    char ch = 'y';
    q->stack1 = NULL;
    q->stack2 = NULL;
    while (ch == 'y'||ch == 'Y') {
        printf("enter ur choice\n1.add to queue\n2.remove from queue\n3.display\n4.exit\n");
        scanf("%d", &f);
        switch(f) {
            case 1 : 
            printf("enter any number\n");
            scanf("%d", &a);
            enqueue(q, a);
            break;
            case 2 : 
            dequeue(q);
            break;
            case 3 : 
            display(q->stack1, q->stack2);
            break;
            case 4 : 
            exit(1);
            break;
            default : 
            printf("The given number is invalid\n");
            break;
        }
    }
}

4. write a c program for insertion and deletion of BST.
#include<stdio.h>
#include <stdlib.h>
struct node {
    int data;
    struct node* left;
    struct node* right;
};
int binarysearch(struct node *root,int item);
struct node *newNode(int item);
struct node* insert(struct node *node, int value);
struct node* delete(struct node *node,int item);
void inorder(struct node* root);
struct node* minNode(struct node *root);
struct node *newNode(int item)
{
    struct node *temp =  (struct node *)malloc(sizeof(struct node));
    temp->data = item;
    temp->left = temp->right = NULL;
    return temp;
}
struct node* insert(struct node *node, int value)
{
if (node == NULL) return newNode(value);
  if (value < node->data)
        node->left  = insert(node->left, value);
    else if (value > node->data)
        node->right = insert(node->right, value);    
return node;
}  
struct node* delete(struct node *node,int item)
{
    if (binarysearch(node,item)==2)
    {
        return node;
    }
    else
    {
        if(item < node->data)
        {
            node->left = delete(node->left, item);  
        } 
        else if(item > node->data)
        {
            node->right = delete(node->right, item);  
        } 
        else if (node->left==NULL && node->right==NULL)
        {
            node=NULL;
        }
        else if (node->left==NULL && node->right!=NULL)
        {
            node=node->right;
        }
        else if (node->left!=NULL && node->right==NULL)
        {
            node=node->left;
        }
        else
        {
            struct node *temp = minNode(node->right);  
            node->data = temp->data;  
            node->right = delete(node->right, temp->data);
        }
    }
}
void inorder(struct node* root){
    if(root == NULL) return;
    inorder(root->left);
    printf("%d ", root->data);
    inorder(root->right);
}
int binarysearch(struct node *root,int item)
{   
        if (root->data==item)
        {
            return 1;
        }
        else if (root->data<item)
        {
            if (root->right=='\0')
            {
                return 2;
            }
            else{
            binarysearch(root->right,item);}
        }
        else
        {   if (root->left=='\0')
            {
                return 2;
            }
            else
            {
                binarysearch(root->left,item);
            }
        }
}
struct node* minNode(struct node *root) {  
    if (root->left != NULL)  
        return minNode(root->left);  
    else   
        return root;  
} 
void main()
{
    struct node* root;
    int i=0, item;
    int n,t;
    printf("enter no of elements");
    scanf("%d",&n);
    while (i<n)
    {    
        printf("enter elements:");
        scanf("%d",&t);
        root=insert(root,t);
        i++;
    }
    inorder(root);
    printf("\n");
    delete(root,50);
    inorder(root);
    printf("\n");
    delete(root,32);
    inorder(root);
    printf("\n");
    delete(root,46);
    inorder(root);
    printf("\n");
    delete(root,22);
    inorder(root);
    printf("\n");
} 
